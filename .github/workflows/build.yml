# This is the main CI workflow that builds and verifies the application on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: builds the application on ubuntu with stable and beta rust toolchains
# - os-check: builds the application on mac and windows
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: build
jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu / ${{ matrix.toolchain }}
    strategy:
      matrix:
        # run on stable and beta to ensure that builds won't break on the next version of the rust
        # toolchain
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc
          # Ensure cc symlink exists for Rust linker
          sudo ln -sf /usr/bin/gcc /usr/bin/cc
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # branch=master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo generate-lockfile
        # enable this ci template to run regardless of whether the lockfile is checked in or not
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo build --locked
        run: cargo build --locked --all-features
  os-check:
    # run cargo build on mac and windows
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # branch=master
        with:
          toolchain: stable
      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS should have Xcode command line tools, but let's ensure they're available
          xcode-select --install || true
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo build
        run: cargo build --locked --all-features
